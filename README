picoc
━━━━━
PicoC is a small C interpreter for scripting.
Forked from the original, written by Zik Saleeba,
it was originally written as a script language for a UAV's on-board flight system.
It's also very suitable for other robotic, embedded and non-embedded applications.

The core C source code in its early stages was around 3500 lines of code.
It was not intended to be a complete implementation of ISO C but it had all the essentials.
When compiled it only takes a few k of code space and is also very sparing of data space.
This means it can work well in small embedded devices.
It's also a fun example of how to create a very small language implementation while still keeping the code readable.

picoc was feature-frozen prior to being forked.
Since it was important that it remain small it was intended that no more major features would be added.
It's been tested on x86-32, x86-64, powerpc, arm, ultrasparc, HP-PA and blackfin processors and is easy to port to new targets.
However, it may be brought more up to par with C - at least C99, possibly also with features of C11 included.
In any case, the parser is slated for a complete rewrite, reduction and simplification,
possibly making use of the new algebraic formalism for context free expressions,
based on the Chomsky-Schützenberger Theorem.
A reference grammar, that is a combined adaptation of the ISO grammar,
for C 1989/1990, C 1999 and C 2010/2011, has been included as the file SyntaxC.pdf.
This is subject to later expansion, modification, and rewriting in TeX.

Compiling picoc
───────────────
picoc can be compiled for a UNIX/Linux/POSIX host by typing "make".

The test suite can be run by typing "make test".

Other configurations were included, with the fork from the original, besides Windows and UNIX,
but may be discontinued, because they were not consistently maintained or completely developed.

Porting picoc
─────────────
Sys.h is where you select your platform type and specify the includes etc. for your platform.

Sys/Sys*.c contains support functions so the compiler can work on your platform,
such as how to write characters to the console etc..

Sys/Lib*.c contains your library of functions you want to make available to user programs,
while Lib.c contains user library functions like printf() which are platform-independent.

Porting the system will involve setting up suitable includes and defines in Sys.h,
writing some I/O routines in Sys/Sys*.c, putting whatever user functions you want in Sys/Lib*.c
and then changing the main program in Main.c to whatever you need to do to get programs into the system.

Sys.h is targeted for UNIX hosts so tests can be easily run on a UNIX system.
You'll need to specify your own host setup dependent on your target platform.

Copyright
─────────
picoc is published under the "New BSD License".
	http://www.opensource.org/licenses/bsd-license.php

Copyright (c) 2009-2011, Zik Saleeba
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
▪	Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.
▪	Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation
	and/or other materials provided with the distribution.
▪	Neither the name of the Zik Saleeba nor the names of its contributors may be used to endorse
	or promote products derived from this software without specific prior written permission.

This software is provided by the copyright holders and contributors "as is" and any express or implied warranties,
including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed.
In no event shall the copyright owner or contributors be liable
for any direct, indirect, incidental, special, exemplary, or consequential damages
(including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits;
or business interruption) however caused and on any theory of liability,
whether in contract, strict liability, or tort (including negligence or otherwise)
arising in any way out of the use of this software, even if advised of the possibility of such damage.
